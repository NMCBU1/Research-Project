library(datasets)
?iris
data(iris)
virginica =
columnMeans(iris)
colMeans(iris)
columnMeans(iris[,"Sepal.Lenght"])
colMeans(iris[,"Sepal.Lenght"])
columnMeans(iris[,"Sepal.Length"])
colMeans(iris[,"Sepal.Length"])
mean(iris[,"Sepal.Length"])
virginica = select(iris, "Sepal.Length", "Species")
virginica = Select(iris, "Sepal.Length", "Species")
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
split(mtcars, mtcars$cyl)
?mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
lapply(mtcars, mean)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(m)
}
data <- x$get()
inv <- solve(x)
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
mat <- matrix(data = 1:9, nrow = 3, ncol = 3, byrow = FALSE,
dimnames = NULL)
cacheSolve(mat)
m1<-makeCacheMatrix(mat)
> cacheSolve(mat)
m1<-makeCacheMatrix(mat)cacheSolve(mat)
m1<-makeCacheMatrix(mat)
cacheSolve(mat)
m1<-makeCacheMatrix(mat)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ... = )
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
m1<-makeCacheMatrix(mat)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ... = )
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(mat)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y*
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ... = )
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(mat)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ... = )
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(makeCacheMatrix(mat))
cacheSolve(makeCacheMatrix(mat))
cacheSolve(makeCacheMatrix(mat))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(makeCacheMatrix(mat))
mat <- rbind(c(-3,1), c(5,0))
cacheSolve(makeCacheMatrix(mat))
cacheSolve(makeCacheMatrix(mat))
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
print(y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
sample(seq(as.Date('1999/01/01'), as.Date('2000/01/01'), by="day"), 12)
seq(as.Date('1999/04/01'), as.Date('2000/06/30'), by="day")
sample(seq(as.Date('1999/04/01'), as.Date('2000/06/30'), by="day"), 200)
sort(sample(seq(as.Date('2021/04/01'), as.Date('2021/06/30'), by="day"), 200))
seq(as.Date('2021/04/01'), as.Date('2021/06/30'), by="day")
lst <- seq(as.Date('2021/04/01'), as.Date('2021/06/30'), by="day")
for (date in lst){}
"x"*2
removeWords <- function(str, words = c("rt", "colombia", "y", "yo", "las", "que", "los", "de", "del", "la", "el", "a")) {
x <- unlist(strsplit(str, " "))
string <- paste(x[!x %in% words], collapse = " ")
}
removeWords(lst)
lst
unlist(lst)
paste (lst, sep = " ", collapse = NULL)
for(i in lst){}
s
s <- string()
s <- String
s <- String()
s<- c()
for(i in lst){
paste(s, i)
}
for(i in lst){
s<-    paste(s, i)  }
s
lst
str(lst)
s <- str(lst)
print(s)
s
rnorm(500, 33346207, 187551753)
VlrNeto <- round(rnorm(500, 33346207, 187551753), 0)
VlrNeto <- ifelse(ingresos < 0, 0, ingresos)
hist(VlrNeto
)
VlrNeto <- round(rnorm(500, 33346207, 187551753), 0)
> VlrNeto <- ifelse(VlrNeto < 0, 0, VlrNeto)
VlrNeto <- ifelse(VlrNeto < 0, 0, VlrNeto)
hist(VlrNeto)
VlrNeto <- round(rnorm(500, 33346207, 18755175), 0)
hist(VlrNeto)
VlrNeto <- ifelse(VlrNeto < 0, 0, VlrNeto)
hist(VlrNeto)
VlrNeto <- round(rnorm(500, 33346207, 1875517), 0)
hist(VlrNeto)
VlrNeto <- round(rnorm(500, 1500000, 500000), 0)
> hist(VlrNeto)
VlrNeto <- round(rnorm(500, 33346207, 18755175), 0)
hist(VlrNeto)
VlrNeto <- round(rnorm(500, 1500000, 500000), 0)
hist(VlrNeto)
VlrNeto <- round(rnorm(500, 1500000, 500000), 0)
VlrNeto <- ifelse(VlrNeto < 0, 0, VlrNeto)
hist(VlrNeto)
VlrNeto
VlrNeto <- round(rnorm(500, 1500000, 500000), 0)
VlrNeto <- ifelse(VlrNeto < 0, 50000, VlrNeto)
hist(VlrNeto)
view(VlrNeto)
view(data.frame((VlrNeto)))
View(data.frame((VlrNeto)))
write.excel <- function(x,row.names=FALSE,col.names=TRUE,...) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names,...)
}
write.excel(data.frame((VlrNeto)))
VlrNeto <- round(rnorm(500, 1500000, 500000), 0)
VlrNeto <- ifelse(VlrNeto < 0, 50000, VlrNeto)
hist(VlrNeto)
display(VlrNeto)
Display(VlrNeto)
view(VlrNeto)
View(VlrNeto)
view(data.frame((VlrNeto)))
View(data.frame((VlrNeto)))
df <- read.csv(paste(2007-3, ".csv", sep = ""))
setwd("~/Desktop/Research project 2")
df <- read.csv(paste("2007-3", ".csv", sep = ""))
df<- read.csv("2007-3.csv")
df<- read.csv("2007-03.csv")
View(df)
df<- read.csv("2007-08.csv")
